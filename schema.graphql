scalar DateTime

enum PhotoCategory {
  SELFIE
  PORTRAIT
  ACTION
  LANDSCAPE
  GRAPHIC
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

enum SortablePhotoField {
  name
  description
  category
  created
}

input PostPhotoInput{
  name: String!
  description: String
  category: PhotoCategory=PORTRAIT
}

input PhotoFilter{
  category: PhotoCategory
  createdBetween: DateRange
  taggedUsers: [ID!]
  searchText: String
}

input DateRange{
  start: DateTime!
  end: DateTime!
}

input DataPage{
  first: Int = 25
  start: Int = 0
}

input DataSort{
  sort: SortDirection = DESCENDING
  sortBy: SortablePhotoField = created
}

type User {
  githubLogin: ID!
  name: String
  avatar: String
  postedPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
  inPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
}

type Photo {
  id: ID!
  name: String!
  url: String!
  description: String
  created: DateTime!
  category: PhotoCategory!
  postedBy: User!
  taggedUsers(sorting: DataSort): [User!]!
}

type Query {
  totalPhotos: Int!
  totalUsers: Int!
  allUsers(
    paging: DataPage
    sorting: DataSort
  ): [User!]!
  User(githubLogin: ID!): User!
  Photo(id: ID!): Photo!
  allPhotos(
    filter: PhotoFilter
    paging: DataPage
    sorting: DataSort
  ): [Photo!]!
}

type Mutation {
  postPhoto(input: PostPhotoInput!): Photo!
}

type Subscription {
  newPhoto: Photo!
  newUser: User!
}

schema{
  query: Query
  mutation: Mutation
  subscription: Subscription
}
